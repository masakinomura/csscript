//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSScript.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

#pragma warning disable 3021
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class CSScriptParser : Parser {
	public const int
		EOL=1, OP_MUL=2, VAR=3, NEW=4, USING=5, OP_ASSIGN=6, LESS_THAN=7, GREATER_THAN=8, 
		PARENTHESIS_START=9, PARENTHESIS_END=10, RECTANGLE_BRACE_START=11, RECTANGLE_BRACE_END=12, 
		CURLY_BRACE_START=13, CURLY_BRACE_END=14, COMMA=15, DOT=16, NAME=17, INT=18, 
		UINT=19, LONG=20, ULONG=21, FLOAT=22, DOUBLE=23, DECIMAL=24, STRING=25, 
		WHITESPACE=26, NEWLINE=27;
	public const int
		RULE_code = 0, RULE_line = 1, RULE_block = 2, RULE_expression = 3, RULE_parameters = 4, 
		RULE_vartypes = 5, RULE_vartype = 6, RULE_arraytype = 7, RULE_selector = 8, 
		RULE_generictype = 9, RULE_generic_parameters = 10, RULE_namespace = 11, 
		RULE_array_index = 12, RULE_initializer = 13, RULE_class_initializer = 14, 
		RULE_class_initializer_element = 15, RULE_array_initializer = 16, RULE_dictionary_initializer = 17, 
		RULE_dictionary_initializer_element = 18;
	public static readonly string[] ruleNames = {
		"code", "line", "block", "expression", "parameters", "vartypes", "vartype", 
		"arraytype", "selector", "generictype", "generic_parameters", "namespace", 
		"array_index", "initializer", "class_initializer", "class_initializer_element", 
		"array_initializer", "dictionary_initializer", "dictionary_initializer_element"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'*'", "'var'", "'new'", "'using'", "'='", "'<'", "'>'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "OP_MUL", "VAR", "NEW", "USING", "OP_ASSIGN", "LESS_THAN", 
		"GREATER_THAN", "PARENTHESIS_START", "PARENTHESIS_END", "RECTANGLE_BRACE_START", 
		"RECTANGLE_BRACE_END", "CURLY_BRACE_START", "CURLY_BRACE_END", "COMMA", 
		"DOT", "NAME", "INT", "UINT", "LONG", "ULONG", "FLOAT", "DOUBLE", "DECIMAL", 
		"STRING", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CSScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CodeContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << USING) | (1L << PARENTHESIS_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0)) {
				{
				{
				State = 38; line();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 44; expression(0);
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << USING) | (1L << PARENTHESIS_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0) );
			State = 49; Match(EOL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode CURLY_BRACE_START() { return GetToken(CSScriptParser.CURLY_BRACE_START, 0); }
		public ITerminalNode CURLY_BRACE_END() { return GetToken(CSScriptParser.CURLY_BRACE_END, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(CURLY_BRACE_START);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << USING) | (1L << PARENTHESIS_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0)) {
				{
				{
				State = 52; line();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 58; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UlongAtomExpContext : ExpressionContext {
		public ITerminalNode ULONG() { return GetToken(CSScriptParser.ULONG, 0); }
		public UlongAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUlongAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(CSScriptParser.DOT, 0); }
		public DotExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingNamespaceExpContext : ExpressionContext {
		public ITerminalNode USING() { return GetToken(CSScriptParser.USING, 0); }
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public UsingNamespaceExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpContext : ExpressionContext {
		public ITerminalNode NEW() { return GetToken(CSScriptParser.NEW, 0); }
		public VartypesContext vartypes() {
			return GetRuleContext<VartypesContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public Array_indexContext array_index() {
			return GetRuleContext<Array_indexContext>(0);
		}
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public NewExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncExpContext : ExpressionContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public FuncExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectorExpContext : ExpressionContext {
		public SelectorContext[] selector() {
			return GetRuleContexts<SelectorContext>();
		}
		public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		public SelectorExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_ASSIGN() { return GetToken(CSScriptParser.OP_ASSIGN, 0); }
		public AssignmentExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomExpContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(CSScriptParser.STRING, 0); }
		public StringAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatAtomExpContext : ExpressionContext {
		public ITerminalNode FLOAT() { return GetToken(CSScriptParser.FLOAT, 0); }
		public FloatAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayIndexExpContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_indexContext array_index() {
			return GetRuleContext<Array_indexContext>(0);
		}
		public ArrayIndexExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDeclExpContext : ExpressionContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public ITerminalNode VAR() { return GetToken(CSScriptParser.VAR, 0); }
		public VartypesContext vartypes() {
			return GetRuleContext<VartypesContext>(0);
		}
		public ArraytypeContext arraytype() {
			return GetRuleContext<ArraytypeContext>(0);
		}
		public VarDeclExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntAtomExpContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(CSScriptParser.INT, 0); }
		public IntAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleAtomExpContext : ExpressionContext {
		public ITerminalNode DECIMAL() { return GetToken(CSScriptParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSScriptParser.DOUBLE, 0); }
		public DoubleAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UintAtomExpContext : ExpressionContext {
		public ITerminalNode UINT() { return GetToken(CSScriptParser.UINT, 0); }
		public UintAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUintAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongAtomExpContext : ExpressionContext {
		public ITerminalNode LONG() { return GetToken(CSScriptParser.LONG, 0); }
		public LongAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 61; Match(PARENTHESIS_START);
				State = 62; expression(0);
				State = 63; Match(PARENTHESIS_END);
				}
				break;
			case 2:
				{
				_localctx = new NewExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 65; Match(NEW);
				State = 66; vartypes();
				State = 69;
				switch (TokenStream.La(1)) {
				case PARENTHESIS_START:
					{
					State = 67; parameters();
					}
					break;
				case RECTANGLE_BRACE_START:
					{
					State = 68; array_index();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 72;
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 71; initializer();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new VarDeclExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 79;
				switch (TokenStream.La(1)) {
				case VAR:
					{
					State = 74; Match(VAR);
					}
					break;
				case NAME:
					{
					{
					State = 75; vartypes();
					State = 77;
					_la = TokenStream.La(1);
					if (_la==RECTANGLE_BRACE_START) {
						{
						State = 76; arraytype();
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 81; Match(NAME);
				}
				break;
			case 4:
				{
				_localctx = new UsingNamespaceExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 82; Match(USING);
				State = 83; @namespace();
				}
				break;
			case 5:
				{
				_localctx = new SelectorExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 84; selector();
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 85; Match(DOT);
						State = 86; selector();
						}
						} 
					}
					State = 91;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
				break;
			case 6:
				{
				_localctx = new FuncExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 92; Match(NAME);
				State = 94;
				_la = TokenStream.La(1);
				if (_la==LESS_THAN) {
					{
					State = 93; generic_parameters();
					}
				}

				State = 96; parameters();
				}
				break;
			case 7:
				{
				_localctx = new LongAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 97; Match(LONG);
				}
				break;
			case 8:
				{
				_localctx = new UlongAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 98; Match(ULONG);
				}
				break;
			case 9:
				{
				_localctx = new IntAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 99; Match(INT);
				}
				break;
			case 10:
				{
				_localctx = new UintAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 100; Match(UINT);
				}
				break;
			case 11:
				{
				_localctx = new DoubleAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 101; Match(DECIMAL);
				}
				break;
			case 12:
				{
				_localctx = new DoubleAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102; Match(DOUBLE);
				}
				break;
			case 13:
				{
				_localctx = new FloatAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 103; Match(FLOAT);
				}
				break;
			case 14:
				{
				_localctx = new StringAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 104; Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 117;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 115;
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new DotExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 107;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 108; Match(DOT);
						State = 109; expression(14);
						}
						break;
					case 2:
						{
						_localctx = new AssignmentExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 110;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 111; Match(OP_ASSIGN);
						State = 112; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new ArrayIndexExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 113;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 114; array_index();
						}
						break;
					}
					} 
				}
				State = 119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 8, RULE_parameters);
		int _la;
		try {
			State = 133;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; Match(PARENTHESIS_START);
				State = 121; Match(PARENTHESIS_END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; Match(PARENTHESIS_START);
				State = 123; expression(0);
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 124; Match(COMMA);
					State = 125; expression(0);
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 131; Match(PARENTHESIS_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VartypesContext : ParserRuleContext {
		public VartypeContext[] vartype() {
			return GetRuleContexts<VartypeContext>();
		}
		public VartypeContext vartype(int i) {
			return GetRuleContext<VartypeContext>(i);
		}
		public VartypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vartypes; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVartypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VartypesContext vartypes() {
		VartypesContext _localctx = new VartypesContext(Context, State);
		EnterRule(_localctx, 10, RULE_vartypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; vartype();
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 136; Match(DOT);
				State = 137; vartype();
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VartypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public VartypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vartype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVartype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VartypeContext vartype() {
		VartypeContext _localctx = new VartypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_vartype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(NAME);
			State = 145;
			_la = TokenStream.La(1);
			if (_la==LESS_THAN) {
				{
				State = 144; generic_parameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraytypeContext : ParserRuleContext {
		public ArraytypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraytype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraytype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraytypeContext arraytype() {
		ArraytypeContext _localctx = new ArraytypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_arraytype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(RECTANGLE_BRACE_START);
			State = 148; Match(RECTANGLE_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 16, RULE_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(NAME);
			State = 152;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 151; generic_parameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenerictypeContext : ParserRuleContext {
		public VartypesContext vartypes() {
			return GetRuleContext<VartypesContext>(0);
		}
		public ArraytypeContext arraytype() {
			return GetRuleContext<ArraytypeContext>(0);
		}
		public GenerictypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generictype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenerictype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenerictypeContext generictype() {
		GenerictypeContext _localctx = new GenerictypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_generictype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; vartypes();
			State = 156;
			_la = TokenStream.La(1);
			if (_la==RECTANGLE_BRACE_START) {
				{
				State = 155; arraytype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parametersContext : ParserRuleContext {
		public GenerictypeContext[] generictype() {
			return GetRuleContexts<GenerictypeContext>();
		}
		public GenerictypeContext generictype(int i) {
			return GetRuleContext<GenerictypeContext>(i);
		}
		public Generic_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parametersContext generic_parameters() {
		Generic_parametersContext _localctx = new Generic_parametersContext(Context, State);
		EnterRule(_localctx, 20, RULE_generic_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(LESS_THAN);
			State = 159; generictype();
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 160; Match(COMMA);
				State = 161; generictype();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 167; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(CSScriptParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(CSScriptParser.NAME, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 22, RULE_namespace);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(NAME);
			State = 174;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 170;
					MatchWildcard();
					State = 171; Match(NAME);
					}
					} 
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_indexContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_indexContext array_index() {
		Array_indexContext _localctx = new Array_indexContext(Context, State);
		EnterRule(_localctx, 24, RULE_array_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(RECTANGLE_BRACE_START);
			State = 179;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << USING) | (1L << PARENTHESIS_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0)) {
				{
				State = 178; expression(0);
				}
			}

			State = 181; Match(RECTANGLE_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public Class_initializerContext class_initializer() {
			return GetRuleContext<Class_initializerContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Dictionary_initializerContext dictionary_initializer() {
			return GetRuleContext<Dictionary_initializerContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 26, RULE_initializer);
		try {
			State = 186;
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183; class_initializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 184; array_initializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 185; dictionary_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_initializerContext : ParserRuleContext {
		public Class_initializer_elementContext[] class_initializer_element() {
			return GetRuleContexts<Class_initializer_elementContext>();
		}
		public Class_initializer_elementContext class_initializer_element(int i) {
			return GetRuleContext<Class_initializer_elementContext>(i);
		}
		public Class_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_initializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_initializerContext class_initializer() {
		Class_initializerContext _localctx = new Class_initializerContext(Context, State);
		EnterRule(_localctx, 28, RULE_class_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(CURLY_BRACE_START);
			State = 189; class_initializer_element();
			State = 194;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 190; Match(COMMA);
					State = 191; class_initializer_element();
					}
					} 
				}
				State = 196;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 198;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 197; Match(COMMA);
				}
			}

			State = 200; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_initializer_elementContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Class_initializer_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_initializer_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_initializer_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_initializer_elementContext class_initializer_element() {
		Class_initializer_elementContext _localctx = new Class_initializer_elementContext(Context, State);
		EnterRule(_localctx, 30, RULE_class_initializer_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(NAME);
			State = 203; Match(OP_ASSIGN);
			State = 204; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(Context, State);
		EnterRule(_localctx, 32, RULE_array_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(CURLY_BRACE_START);
			State = 207; expression(0);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 208; Match(COMMA);
				State = 209; expression(0);
				}
				}
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 215; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dictionary_initializerContext : ParserRuleContext {
		public Dictionary_initializer_elementContext[] dictionary_initializer_element() {
			return GetRuleContexts<Dictionary_initializer_elementContext>();
		}
		public Dictionary_initializer_elementContext dictionary_initializer_element(int i) {
			return GetRuleContext<Dictionary_initializer_elementContext>(i);
		}
		public Dictionary_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary_initializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dictionary_initializerContext dictionary_initializer() {
		Dictionary_initializerContext _localctx = new Dictionary_initializerContext(Context, State);
		EnterRule(_localctx, 34, RULE_dictionary_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(CURLY_BRACE_START);
			State = 218; dictionary_initializer_element();
			State = 223;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 219; Match(COMMA);
					State = 220; dictionary_initializer_element();
					}
					} 
				}
				State = 225;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 227;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 226; Match(COMMA);
				}
			}

			State = 229; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dictionary_initializer_elementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Dictionary_initializer_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary_initializer_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary_initializer_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dictionary_initializer_elementContext dictionary_initializer_element() {
		Dictionary_initializer_elementContext _localctx = new Dictionary_initializer_elementContext(Context, State);
		EnterRule(_localctx, 36, RULE_dictionary_initializer_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(CURLY_BRACE_START);
			State = 232; expression(0);
			State = 233; Match(COMMA);
			State = 234; expression(0);
			State = 235; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 10);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1D\xF0\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\a\x2"+
		"*\n\x2\f\x2\xE\x2-\v\x2\x3\x3\x6\x3\x30\n\x3\r\x3\xE\x3\x31\x3\x3\x3\x3"+
		"\x3\x4\x3\x4\a\x4\x38\n\x4\f\x4\xE\x4;\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5H\n\x5\x3\x5\x5\x5K\n\x5"+
		"\x3\x5\x3\x5\x3\x5\x5\x5P\n\x5\x5\x5R\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\a\x5Z\n\x5\f\x5\xE\x5]\v\x5\x3\x5\x3\x5\x5\x5\x61\n\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5l\n\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5v\n\x5\f\x5\xE\x5y\v\x5\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x81\n\x6\f\x6\xE\x6\x84\v\x6\x3"+
		"\x6\x3\x6\x5\x6\x88\n\x6\x3\a\x3\a\x3\a\a\a\x8D\n\a\f\a\xE\a\x90\v\a\x3"+
		"\b\x3\b\x5\b\x94\n\b\x3\t\x3\t\x3\t\x3\n\x3\n\x5\n\x9B\n\n\x3\v\x3\v\x5"+
		"\v\x9F\n\v\x3\f\x3\f\x3\f\x3\f\a\f\xA5\n\f\f\f\xE\f\xA8\v\f\x3\f\x3\f"+
		"\x3\r\x3\r\x3\r\a\r\xAF\n\r\f\r\xE\r\xB2\v\r\x3\xE\x3\xE\x5\xE\xB6\n\xE"+
		"\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x5\xF\xBD\n\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\a\x10\xC3\n\x10\f\x10\xE\x10\xC6\v\x10\x3\x10\x5\x10\xC9\n\x10\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\a"+
		"\x12\xD5\n\x12\f\x12\xE\x12\xD8\v\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\a\x13\xE0\n\x13\f\x13\xE\x13\xE3\v\x13\x3\x13\x5\x13\xE6\n\x13"+
		"\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x2\x3"+
		"\b\x15\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&\x2\x2\x105"+
		"\x2+\x3\x2\x2\x2\x4/\x3\x2\x2\x2\x6\x35\x3\x2\x2\x2\bk\x3\x2\x2\x2\n\x87"+
		"\x3\x2\x2\x2\f\x89\x3\x2\x2\x2\xE\x91\x3\x2\x2\x2\x10\x95\x3\x2\x2\x2"+
		"\x12\x98\x3\x2\x2\x2\x14\x9C\x3\x2\x2\x2\x16\xA0\x3\x2\x2\x2\x18\xAB\x3"+
		"\x2\x2\x2\x1A\xB3\x3\x2\x2\x2\x1C\xBC\x3\x2\x2\x2\x1E\xBE\x3\x2\x2\x2"+
		" \xCC\x3\x2\x2\x2\"\xD0\x3\x2\x2\x2$\xDB\x3\x2\x2\x2&\xE9\x3\x2\x2\x2"+
		"(*\x5\x4\x3\x2)(\x3\x2\x2\x2*-\x3\x2\x2\x2+)\x3\x2\x2\x2+,\x3\x2\x2\x2"+
		",\x3\x3\x2\x2\x2-+\x3\x2\x2\x2.\x30\x5\b\x5\x2/.\x3\x2\x2\x2\x30\x31\x3"+
		"\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33"+
		"\x34\a\x3\x2\x2\x34\x5\x3\x2\x2\x2\x35\x39\a\xF\x2\x2\x36\x38\x5\x4\x3"+
		"\x2\x37\x36\x3\x2\x2\x2\x38;\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2"+
		"\x2\x2:<\x3\x2\x2\x2;\x39\x3\x2\x2\x2<=\a\x10\x2\x2=\a\x3\x2\x2\x2>?\b"+
		"\x5\x1\x2?@\a\v\x2\x2@\x41\x5\b\x5\x2\x41\x42\a\f\x2\x2\x42l\x3\x2\x2"+
		"\x2\x43\x44\a\x6\x2\x2\x44G\x5\f\a\x2\x45H\x5\n\x6\x2\x46H\x5\x1A\xE\x2"+
		"G\x45\x3\x2\x2\x2G\x46\x3\x2\x2\x2HJ\x3\x2\x2\x2IK\x5\x1C\xF\x2JI\x3\x2"+
		"\x2\x2JK\x3\x2\x2\x2Kl\x3\x2\x2\x2LR\a\x5\x2\x2MO\x5\f\a\x2NP\x5\x10\t"+
		"\x2ON\x3\x2\x2\x2OP\x3\x2\x2\x2PR\x3\x2\x2\x2QL\x3\x2\x2\x2QM\x3\x2\x2"+
		"\x2RS\x3\x2\x2\x2Sl\a\x13\x2\x2TU\a\a\x2\x2Ul\x5\x18\r\x2V[\x5\x12\n\x2"+
		"WX\a\x12\x2\x2XZ\x5\x12\n\x2YW\x3\x2\x2\x2Z]\x3\x2\x2\x2[Y\x3\x2\x2\x2"+
		"[\\\x3\x2\x2\x2\\l\x3\x2\x2\x2][\x3\x2\x2\x2^`\a\x13\x2\x2_\x61\x5\x16"+
		"\f\x2`_\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62l\x5\n\x6"+
		"\x2\x63l\a\x16\x2\x2\x64l\a\x17\x2\x2\x65l\a\x14\x2\x2\x66l\a\x15\x2\x2"+
		"gl\a\x1A\x2\x2hl\a\x19\x2\x2il\a\x18\x2\x2jl\a\x1B\x2\x2k>\x3\x2\x2\x2"+
		"k\x43\x3\x2\x2\x2kQ\x3\x2\x2\x2kT\x3\x2\x2\x2kV\x3\x2\x2\x2k^\x3\x2\x2"+
		"\x2k\x63\x3\x2\x2\x2k\x64\x3\x2\x2\x2k\x65\x3\x2\x2\x2k\x66\x3\x2\x2\x2"+
		"kg\x3\x2\x2\x2kh\x3\x2\x2\x2ki\x3\x2\x2\x2kj\x3\x2\x2\x2lw\x3\x2\x2\x2"+
		"mn\f\xF\x2\x2no\a\x12\x2\x2ov\x5\b\x5\x10pq\f\v\x2\x2qr\a\b\x2\x2rv\x5"+
		"\b\x5\fst\f\f\x2\x2tv\x5\x1A\xE\x2um\x3\x2\x2\x2up\x3\x2\x2\x2us\x3\x2"+
		"\x2\x2vy\x3\x2\x2\x2wu\x3\x2\x2\x2wx\x3\x2\x2\x2x\t\x3\x2\x2\x2yw\x3\x2"+
		"\x2\x2z{\a\v\x2\x2{\x88\a\f\x2\x2|}\a\v\x2\x2}\x82\x5\b\x5\x2~\x7F\a\x11"+
		"\x2\x2\x7F\x81\x5\b\x5\x2\x80~\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82\x80"+
		"\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84\x82\x3\x2\x2"+
		"\x2\x85\x86\a\f\x2\x2\x86\x88\x3\x2\x2\x2\x87z\x3\x2\x2\x2\x87|\x3\x2"+
		"\x2\x2\x88\v\x3\x2\x2\x2\x89\x8E\x5\xE\b\x2\x8A\x8B\a\x12\x2\x2\x8B\x8D"+
		"\x5\xE\b\x2\x8C\x8A\x3\x2\x2\x2\x8D\x90\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2"+
		"\x8E\x8F\x3\x2\x2\x2\x8F\r\x3\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x91\x93\a\x13"+
		"\x2\x2\x92\x94\x5\x16\f\x2\x93\x92\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94"+
		"\xF\x3\x2\x2\x2\x95\x96\a\r\x2\x2\x96\x97\a\xE\x2\x2\x97\x11\x3\x2\x2"+
		"\x2\x98\x9A\a\x13\x2\x2\x99\x9B\x5\x16\f\x2\x9A\x99\x3\x2\x2\x2\x9A\x9B"+
		"\x3\x2\x2\x2\x9B\x13\x3\x2\x2\x2\x9C\x9E\x5\f\a\x2\x9D\x9F\x5\x10\t\x2"+
		"\x9E\x9D\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\x15\x3\x2\x2\x2\xA0\xA1\a"+
		"\t\x2\x2\xA1\xA6\x5\x14\v\x2\xA2\xA3\a\x11\x2\x2\xA3\xA5\x5\x14\v\x2\xA4"+
		"\xA2\x3\x2\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA7\x3\x2"+
		"\x2\x2\xA7\xA9\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA9\xAA\a\n\x2\x2\xAA\x17"+
		"\x3\x2\x2\x2\xAB\xB0\a\x13\x2\x2\xAC\xAD\v\x2\x2\x2\xAD\xAF\a\x13\x2\x2"+
		"\xAE\xAC\x3\x2\x2\x2\xAF\xB2\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB0\xB1\x3"+
		"\x2\x2\x2\xB1\x19\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB3\xB5\a\r\x2\x2\xB4"+
		"\xB6\x5\b\x5\x2\xB5\xB4\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB7\x3\x2"+
		"\x2\x2\xB7\xB8\a\xE\x2\x2\xB8\x1B\x3\x2\x2\x2\xB9\xBD\x5\x1E\x10\x2\xBA"+
		"\xBD\x5\"\x12\x2\xBB\xBD\x5$\x13\x2\xBC\xB9\x3\x2\x2\x2\xBC\xBA\x3\x2"+
		"\x2\x2\xBC\xBB\x3\x2\x2\x2\xBD\x1D\x3\x2\x2\x2\xBE\xBF\a\xF\x2\x2\xBF"+
		"\xC4\x5 \x11\x2\xC0\xC1\a\x11\x2\x2\xC1\xC3\x5 \x11\x2\xC2\xC0\x3\x2\x2"+
		"\x2\xC3\xC6\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC8"+
		"\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC7\xC9\a\x11\x2\x2\xC8\xC7\x3\x2\x2"+
		"\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCB\a\x10\x2\x2\xCB\x1F"+
		"\x3\x2\x2\x2\xCC\xCD\a\x13\x2\x2\xCD\xCE\a\b\x2\x2\xCE\xCF\x5\b\x5\x2"+
		"\xCF!\x3\x2\x2\x2\xD0\xD1\a\xF\x2\x2\xD1\xD6\x5\b\x5\x2\xD2\xD3\a\x11"+
		"\x2\x2\xD3\xD5\x5\b\x5\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD8\x3\x2\x2\x2\xD6"+
		"\xD4\x3\x2\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7\xD9\x3\x2\x2\x2\xD8\xD6\x3\x2"+
		"\x2\x2\xD9\xDA\a\x10\x2\x2\xDA#\x3\x2\x2\x2\xDB\xDC\a\xF\x2\x2\xDC\xE1"+
		"\x5&\x14\x2\xDD\xDE\a\x11\x2\x2\xDE\xE0\x5&\x14\x2\xDF\xDD\x3\x2\x2\x2"+
		"\xE0\xE3\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE5\x3"+
		"\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE6\a\x11\x2\x2\xE5\xE4\x3\x2\x2\x2"+
		"\xE5\xE6\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\xE8\a\x10\x2\x2\xE8%\x3\x2"+
		"\x2\x2\xE9\xEA\a\xF\x2\x2\xEA\xEB\x5\b\x5\x2\xEB\xEC\a\x11\x2\x2\xEC\xED"+
		"\x5\b\x5\x2\xED\xEE\a\x10\x2\x2\xEE\'\x3\x2\x2\x2\x1D+\x31\x39GJOQ[`k"+
		"uw\x82\x87\x8E\x93\x9A\x9E\xA6\xB0\xB5\xBC\xC4\xC8\xD6\xE1\xE5";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
