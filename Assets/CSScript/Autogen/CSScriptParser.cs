//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSScript.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

#pragma warning disable 3021
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class CSScriptParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, MUL=4, VAR=5, LINEEND=6, NAME=7, INT=8, LONG=9, 
		WHITESPACE=10, NEWLINE=11;
	public const int
		RULE_code = 0, RULE_line = 1, RULE_expression = 2;
	public static readonly string[] ruleNames = {
		"code", "line", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'('", "')'", "'*'", null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "MUL", "VAR", "LINEEND", "NAME", "INT", "LONG", 
		"WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CSScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CodeContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 6; line();
				}
				}
				State = 9;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << NAME) | (1L << INT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(CSScriptParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(CSScriptParser.NEWLINE, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				State = 13;
				switch (TokenStream.La(1)) {
				case T__1:
				case NAME:
				case INT:
					{
					State = 11; expression();
					}
					break;
				case T__0:
					{
					State = 12; Match(T__0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << NAME) | (1L << INT))) != 0) );
			State = 17; Match(LINEEND);
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 18; Match(NEWLINE);
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntAtomExpContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(CSScriptParser.INT, 0); }
		public IntAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAtomExpContext : ExpressionContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public IdAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			State = 30;
			switch (TokenStream.La(1)) {
			case T__1:
				_localctx = new ParenthesisExpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; Match(T__1);
				State = 25; expression();
				State = 26; Match(T__2);
				}
				break;
			case NAME:
				_localctx = new IdAtomExpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 28; Match(NAME);
				}
				break;
			case INT:
				_localctx = new IntAtomExpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 29; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\r#\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x3\x2\x6\x2\n\n\x2\r\x2\xE\x2\v\x3\x3\x3\x3\x6\x3"+
		"\x10\n\x3\r\x3\xE\x3\x11\x3\x3\x3\x3\a\x3\x16\n\x3\f\x3\xE\x3\x19\v\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4!\n\x4\x3\x4\x2\x2\x5\x2\x4"+
		"\x6\x2\x2%\x2\t\x3\x2\x2\x2\x4\xF\x3\x2\x2\x2\x6 \x3\x2\x2\x2\b\n\x5\x4"+
		"\x3\x2\t\b\x3\x2\x2\x2\n\v\x3\x2\x2\x2\v\t\x3\x2\x2\x2\v\f\x3\x2\x2\x2"+
		"\f\x3\x3\x2\x2\x2\r\x10\x5\x6\x4\x2\xE\x10\a\x3\x2\x2\xF\r\x3\x2\x2\x2"+
		"\xF\xE\x3\x2\x2\x2\x10\x11\x3\x2\x2\x2\x11\xF\x3\x2\x2\x2\x11\x12\x3\x2"+
		"\x2\x2\x12\x13\x3\x2\x2\x2\x13\x17\a\b\x2\x2\x14\x16\a\r\x2\x2\x15\x14"+
		"\x3\x2\x2\x2\x16\x19\x3\x2\x2\x2\x17\x15\x3\x2\x2\x2\x17\x18\x3\x2\x2"+
		"\x2\x18\x5\x3\x2\x2\x2\x19\x17\x3\x2\x2\x2\x1A\x1B\a\x4\x2\x2\x1B\x1C"+
		"\x5\x6\x4\x2\x1C\x1D\a\x5\x2\x2\x1D!\x3\x2\x2\x2\x1E!\a\t\x2\x2\x1F!\a"+
		"\n\x2\x2 \x1A\x3\x2\x2\x2 \x1E\x3\x2\x2\x2 \x1F\x3\x2\x2\x2!\a\x3\x2\x2"+
		"\x2\a\v\xF\x11\x17 ";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
