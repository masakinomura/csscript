//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSScript.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

#pragma warning disable 3021
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class CSScriptParser : Parser {
	public const int
		OP_MUL=1, VAR=2, NEW=3, USING=4, OP_ASSIGN=5, LESS_THAN=6, GREATER_THAN=7, 
		PARENTHESIS_START=8, PARENTHESIS_END=9, RECTANGLE_BRACE_START=10, RECTANGLE_BRACE_END=11, 
		CURLY_BRACE_START=12, CURLY_BRACE_END=13, COMMA=14, DOT=15, NAME=16, INT=17, 
		UINT=18, LONG=19, ULONG=20, FLOAT=21, DOUBLE=22, DECIMAL=23, STRING=24, 
		EOL=25, WHITESPACE=26, NEWLINE=27;
	public const int
		RULE_code = 0, RULE_line = 1, RULE_block = 2, RULE_expression = 3, RULE_parameters = 4, 
		RULE_vartypes = 5, RULE_vartype = 6, RULE_arraytype = 7, RULE_selector = 8, 
		RULE_generic_parameters = 9, RULE_namespace = 10, RULE_array_index = 11, 
		RULE_initializer = 12, RULE_class_initializer = 13, RULE_class_initializer_element = 14, 
		RULE_array_initializer = 15, RULE_dictionary_initializer = 16, RULE_dictionary_initializer_element = 17;
	public static readonly string[] ruleNames = {
		"code", "line", "block", "expression", "parameters", "vartypes", "vartype", 
		"arraytype", "selector", "generic_parameters", "namespace", "array_index", 
		"initializer", "class_initializer", "class_initializer_element", "array_initializer", 
		"dictionary_initializer", "dictionary_initializer_element"
	};

	private static readonly string[] _LiteralNames = {
		null, "'*'", "'var'", "'new'", "'using'", "'='", "'<'", "'>'", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", "','", "'.'", null, null, null, null, 
		null, null, null, null, null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OP_MUL", "VAR", "NEW", "USING", "OP_ASSIGN", "LESS_THAN", "GREATER_THAN", 
		"PARENTHESIS_START", "PARENTHESIS_END", "RECTANGLE_BRACE_START", "RECTANGLE_BRACE_END", 
		"CURLY_BRACE_START", "CURLY_BRACE_END", "COMMA", "DOT", "NAME", "INT", 
		"UINT", "LONG", "ULONG", "FLOAT", "DOUBLE", "DECIMAL", "STRING", "EOL", 
		"WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CSScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CodeContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << USING) | (1L << PARENTHESIS_START) | (1L << CURLY_BRACE_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0)) {
				{
				{
				State = 36; line();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode EOL() { return GetToken(CSScriptParser.EOL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			State = 50;
			switch (TokenStream.La(1)) {
			case VAR:
			case NEW:
			case USING:
			case PARENTHESIS_START:
			case NAME:
			case INT:
			case UINT:
			case LONG:
			case ULONG:
			case FLOAT:
			case DOUBLE:
			case DECIMAL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 42; expression(0);
					}
					}
					State = 45;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << USING) | (1L << PARENTHESIS_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0) );
				State = 47; Match(EOL);
				}
				}
				break;
			case CURLY_BRACE_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode CURLY_BRACE_START() { return GetToken(CSScriptParser.CURLY_BRACE_START, 0); }
		public ITerminalNode CURLY_BRACE_END() { return GetToken(CSScriptParser.CURLY_BRACE_END, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; Match(CURLY_BRACE_START);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << USING) | (1L << PARENTHESIS_START) | (1L << CURLY_BRACE_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0)) {
				{
				{
				State = 53; line();
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 59; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UlongAtomExpContext : ExpressionContext {
		public ITerminalNode ULONG() { return GetToken(CSScriptParser.ULONG, 0); }
		public UlongAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUlongAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(CSScriptParser.DOT, 0); }
		public DotExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingNamespaceExpContext : ExpressionContext {
		public ITerminalNode USING() { return GetToken(CSScriptParser.USING, 0); }
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public UsingNamespaceExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpContext : ExpressionContext {
		public ITerminalNode NEW() { return GetToken(CSScriptParser.NEW, 0); }
		public VartypesContext vartypes() {
			return GetRuleContext<VartypesContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public Array_indexContext array_index() {
			return GetRuleContext<Array_indexContext>(0);
		}
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public NewExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncExpContext : ExpressionContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public VartypesContext vartypes() {
			return GetRuleContext<VartypesContext>(0);
		}
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public FuncExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpContext : ExpressionContext {
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public VariableExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_ASSIGN() { return GetToken(CSScriptParser.OP_ASSIGN, 0); }
		public AssignmentExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomExpContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(CSScriptParser.STRING, 0); }
		public StringAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatAtomExpContext : ExpressionContext {
		public ITerminalNode FLOAT() { return GetToken(CSScriptParser.FLOAT, 0); }
		public FloatAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayIndexExpContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_indexContext array_index() {
			return GetRuleContext<Array_indexContext>(0);
		}
		public ArrayIndexExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDeclExpContext : ExpressionContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public ITerminalNode VAR() { return GetToken(CSScriptParser.VAR, 0); }
		public VartypesContext vartypes() {
			return GetRuleContext<VartypesContext>(0);
		}
		public ArraytypeContext arraytype() {
			return GetRuleContext<ArraytypeContext>(0);
		}
		public VarDeclExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntAtomExpContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(CSScriptParser.INT, 0); }
		public IntAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleAtomExpContext : ExpressionContext {
		public ITerminalNode DECIMAL() { return GetToken(CSScriptParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSScriptParser.DOUBLE, 0); }
		public DoubleAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UintAtomExpContext : ExpressionContext {
		public ITerminalNode UINT() { return GetToken(CSScriptParser.UINT, 0); }
		public UintAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUintAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongAtomExpContext : ExpressionContext {
		public ITerminalNode LONG() { return GetToken(CSScriptParser.LONG, 0); }
		public LongAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new NewExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 62; Match(NEW);
				State = 63; vartypes();
				State = 66;
				switch (TokenStream.La(1)) {
				case PARENTHESIS_START:
					{
					State = 64; parameters();
					}
					break;
				case RECTANGLE_BRACE_START:
					{
					State = 65; array_index();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 69;
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 68; initializer();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new VarDeclExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 76;
				switch (TokenStream.La(1)) {
				case VAR:
					{
					State = 71; Match(VAR);
					}
					break;
				case NAME:
					{
					{
					State = 72; vartypes();
					State = 74;
					_la = TokenStream.La(1);
					if (_la==RECTANGLE_BRACE_START) {
						{
						State = 73; arraytype();
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 78; Match(NAME);
				}
				break;
			case 3:
				{
				_localctx = new FuncExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 80;
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 79; vartypes();
					}
					break;
				}
				State = 82; Match(NAME);
				State = 84;
				_la = TokenStream.La(1);
				if (_la==LESS_THAN) {
					{
					State = 83; generic_parameters();
					}
				}

				State = 86; parameters();
				}
				break;
			case 4:
				{
				_localctx = new UsingNamespaceExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 87; Match(USING);
				State = 88; @namespace();
				}
				break;
			case 5:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 89; Match(PARENTHESIS_START);
				State = 90; expression(0);
				State = 91; Match(PARENTHESIS_END);
				}
				break;
			case 6:
				{
				_localctx = new VariableExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 93; selector();
				}
				break;
			case 7:
				{
				_localctx = new LongAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 94; Match(LONG);
				}
				break;
			case 8:
				{
				_localctx = new UlongAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 95; Match(ULONG);
				}
				break;
			case 9:
				{
				_localctx = new IntAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 96; Match(INT);
				}
				break;
			case 10:
				{
				_localctx = new UintAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 97; Match(UINT);
				}
				break;
			case 11:
				{
				_localctx = new DoubleAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 98; Match(DECIMAL);
				}
				break;
			case 12:
				{
				_localctx = new DoubleAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 99; Match(DOUBLE);
				}
				break;
			case 13:
				{
				_localctx = new FloatAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 100; Match(FLOAT);
				}
				break;
			case 14:
				{
				_localctx = new StringAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 101; Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 114;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 112;
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new DotExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 104;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 105; Match(DOT);
						State = 106; expression(11);
						}
						break;
					case 2:
						{
						_localctx = new AssignmentExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 107;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 108; Match(OP_ASSIGN);
						State = 109; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new ArrayIndexExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 110;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 111; array_index();
						}
						break;
					}
					} 
				}
				State = 116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 8, RULE_parameters);
		int _la;
		try {
			State = 130;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117; Match(PARENTHESIS_START);
				State = 118; Match(PARENTHESIS_END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119; Match(PARENTHESIS_START);
				State = 120; expression(0);
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 121; Match(COMMA);
					State = 122; expression(0);
					}
					}
					State = 127;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 128; Match(PARENTHESIS_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VartypesContext : ParserRuleContext {
		public VartypeContext[] vartype() {
			return GetRuleContexts<VartypeContext>();
		}
		public VartypeContext vartype(int i) {
			return GetRuleContext<VartypeContext>(i);
		}
		public VartypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vartypes; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVartypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VartypesContext vartypes() {
		VartypesContext _localctx = new VartypesContext(Context, State);
		EnterRule(_localctx, 10, RULE_vartypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; vartype();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 133; Match(DOT);
				State = 134; vartype();
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VartypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public VartypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vartype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVartype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VartypeContext vartype() {
		VartypeContext _localctx = new VartypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_vartype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(NAME);
			State = 142;
			_la = TokenStream.La(1);
			if (_la==LESS_THAN) {
				{
				State = 141; generic_parameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraytypeContext : ParserRuleContext {
		public ArraytypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraytype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraytype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraytypeContext arraytype() {
		ArraytypeContext _localctx = new ArraytypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_arraytype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(RECTANGLE_BRACE_START);
			State = 145; Match(RECTANGLE_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 16, RULE_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(NAME);
			State = 149;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 148; generic_parameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parametersContext : ParserRuleContext {
		public VartypesContext[] vartypes() {
			return GetRuleContexts<VartypesContext>();
		}
		public VartypesContext vartypes(int i) {
			return GetRuleContext<VartypesContext>(i);
		}
		public Generic_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parametersContext generic_parameters() {
		Generic_parametersContext _localctx = new Generic_parametersContext(Context, State);
		EnterRule(_localctx, 18, RULE_generic_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(LESS_THAN);
			State = 152; vartypes();
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 153; Match(COMMA);
				State = 154; vartypes();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 160; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(CSScriptParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(CSScriptParser.NAME, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 20, RULE_namespace);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(NAME);
			State = 167;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 163;
					MatchWildcard();
					State = 164; Match(NAME);
					}
					} 
				}
				State = 169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_indexContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_indexContext array_index() {
		Array_indexContext _localctx = new Array_indexContext(Context, State);
		EnterRule(_localctx, 22, RULE_array_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(RECTANGLE_BRACE_START);
			State = 172;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << USING) | (1L << PARENTHESIS_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0)) {
				{
				State = 171; expression(0);
				}
			}

			State = 174; Match(RECTANGLE_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public Class_initializerContext class_initializer() {
			return GetRuleContext<Class_initializerContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Dictionary_initializerContext dictionary_initializer() {
			return GetRuleContext<Dictionary_initializerContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 24, RULE_initializer);
		try {
			State = 179;
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; class_initializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; array_initializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 178; dictionary_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_initializerContext : ParserRuleContext {
		public Class_initializer_elementContext[] class_initializer_element() {
			return GetRuleContexts<Class_initializer_elementContext>();
		}
		public Class_initializer_elementContext class_initializer_element(int i) {
			return GetRuleContext<Class_initializer_elementContext>(i);
		}
		public Class_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_initializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_initializerContext class_initializer() {
		Class_initializerContext _localctx = new Class_initializerContext(Context, State);
		EnterRule(_localctx, 26, RULE_class_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(CURLY_BRACE_START);
			State = 182; class_initializer_element();
			State = 187;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 183; Match(COMMA);
					State = 184; class_initializer_element();
					}
					} 
				}
				State = 189;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 191;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 190; Match(COMMA);
				}
			}

			State = 193; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_initializer_elementContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Class_initializer_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_initializer_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_initializer_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_initializer_elementContext class_initializer_element() {
		Class_initializer_elementContext _localctx = new Class_initializer_elementContext(Context, State);
		EnterRule(_localctx, 28, RULE_class_initializer_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(NAME);
			State = 196; Match(OP_ASSIGN);
			State = 197; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(Context, State);
		EnterRule(_localctx, 30, RULE_array_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(CURLY_BRACE_START);
			State = 200; expression(0);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 201; Match(COMMA);
				State = 202; expression(0);
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 208; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dictionary_initializerContext : ParserRuleContext {
		public Dictionary_initializer_elementContext[] dictionary_initializer_element() {
			return GetRuleContexts<Dictionary_initializer_elementContext>();
		}
		public Dictionary_initializer_elementContext dictionary_initializer_element(int i) {
			return GetRuleContext<Dictionary_initializer_elementContext>(i);
		}
		public Dictionary_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary_initializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dictionary_initializerContext dictionary_initializer() {
		Dictionary_initializerContext _localctx = new Dictionary_initializerContext(Context, State);
		EnterRule(_localctx, 32, RULE_dictionary_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(CURLY_BRACE_START);
			State = 211; dictionary_initializer_element();
			State = 216;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 212; Match(COMMA);
					State = 213; dictionary_initializer_element();
					}
					} 
				}
				State = 218;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 220;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 219; Match(COMMA);
				}
			}

			State = 222; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dictionary_initializer_elementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Dictionary_initializer_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary_initializer_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary_initializer_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dictionary_initializer_elementContext dictionary_initializer_element() {
		Dictionary_initializer_elementContext _localctx = new Dictionary_initializer_elementContext(Context, State);
		EnterRule(_localctx, 34, RULE_dictionary_initializer_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(CURLY_BRACE_START);
			State = 225; expression(0);
			State = 226; Match(COMMA);
			State = 227; expression(0);
			State = 228; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 14);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1D\xE9\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x3\x2\a\x2(\n\x2\f\x2\xE"+
		"\x2+\v\x2\x3\x3\x6\x3.\n\x3\r\x3\xE\x3/\x3\x3\x3\x3\x3\x3\x5\x3\x35\n"+
		"\x3\x3\x4\x3\x4\a\x4\x39\n\x4\f\x4\xE\x4<\v\x4\x3\x4\x3\x4\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x5\x5\x45\n\x5\x3\x5\x5\x5H\n\x5\x3\x5\x3\x5\x3\x5"+
		"\x5\x5M\n\x5\x5\x5O\n\x5\x3\x5\x3\x5\x5\x5S\n\x5\x3\x5\x3\x5\x5\x5W\n"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5i\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\a\x5s\n\x5\f\x5\xE\x5v\v\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\a\x6~\n\x6\f\x6\xE\x6\x81\v\x6\x3\x6\x3\x6\x5\x6\x85\n"+
		"\x6\x3\a\x3\a\x3\a\a\a\x8A\n\a\f\a\xE\a\x8D\v\a\x3\b\x3\b\x5\b\x91\n\b"+
		"\x3\t\x3\t\x3\t\x3\n\x3\n\x5\n\x98\n\n\x3\v\x3\v\x3\v\x3\v\a\v\x9E\n\v"+
		"\f\v\xE\v\xA1\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\a\f\xA8\n\f\f\f\xE\f\xAB\v"+
		"\f\x3\r\x3\r\x5\r\xAF\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x5\xE\xB6\n\xE\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\a\xF\xBC\n\xF\f\xF\xE\xF\xBF\v\xF\x3\xF\x5\xF\xC2"+
		"\n\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\a\x11\xCE\n\x11\f\x11\xE\x11\xD1\v\x11\x3\x11\x3\x11\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\a\x12\xD9\n\x12\f\x12\xE\x12\xDC\v\x12\x3\x12\x5\x12\xDF"+
		"\n\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x2\x3\b\x14\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$\x2"+
		"\x2\xFF\x2)\x3\x2\x2\x2\x4\x34\x3\x2\x2\x2\x6\x36\x3\x2\x2\x2\bh\x3\x2"+
		"\x2\x2\n\x84\x3\x2\x2\x2\f\x86\x3\x2\x2\x2\xE\x8E\x3\x2\x2\x2\x10\x92"+
		"\x3\x2\x2\x2\x12\x95\x3\x2\x2\x2\x14\x99\x3\x2\x2\x2\x16\xA4\x3\x2\x2"+
		"\x2\x18\xAC\x3\x2\x2\x2\x1A\xB5\x3\x2\x2\x2\x1C\xB7\x3\x2\x2\x2\x1E\xC5"+
		"\x3\x2\x2\x2 \xC9\x3\x2\x2\x2\"\xD4\x3\x2\x2\x2$\xE2\x3\x2\x2\x2&(\x5"+
		"\x4\x3\x2\'&\x3\x2\x2\x2(+\x3\x2\x2\x2)\'\x3\x2\x2\x2)*\x3\x2\x2\x2*\x3"+
		"\x3\x2\x2\x2+)\x3\x2\x2\x2,.\x5\b\x5\x2-,\x3\x2\x2\x2./\x3\x2\x2\x2/-"+
		"\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31\x32\a\x1B\x2\x2"+
		"\x32\x35\x3\x2\x2\x2\x33\x35\x5\x6\x4\x2\x34-\x3\x2\x2\x2\x34\x33\x3\x2"+
		"\x2\x2\x35\x5\x3\x2\x2\x2\x36:\a\xE\x2\x2\x37\x39\x5\x4\x3\x2\x38\x37"+
		"\x3\x2\x2\x2\x39<\x3\x2\x2\x2:\x38\x3\x2\x2\x2:;\x3\x2\x2\x2;=\x3\x2\x2"+
		"\x2<:\x3\x2\x2\x2=>\a\xF\x2\x2>\a\x3\x2\x2\x2?@\b\x5\x1\x2@\x41\a\x5\x2"+
		"\x2\x41\x44\x5\f\a\x2\x42\x45\x5\n\x6\x2\x43\x45\x5\x18\r\x2\x44\x42\x3"+
		"\x2\x2\x2\x44\x43\x3\x2\x2\x2\x45G\x3\x2\x2\x2\x46H\x5\x1A\xE\x2G\x46"+
		"\x3\x2\x2\x2GH\x3\x2\x2\x2Hi\x3\x2\x2\x2IO\a\x4\x2\x2JL\x5\f\a\x2KM\x5"+
		"\x10\t\x2LK\x3\x2\x2\x2LM\x3\x2\x2\x2MO\x3\x2\x2\x2NI\x3\x2\x2\x2NJ\x3"+
		"\x2\x2\x2OP\x3\x2\x2\x2Pi\a\x12\x2\x2QS\x5\f\a\x2RQ\x3\x2\x2\x2RS\x3\x2"+
		"\x2\x2ST\x3\x2\x2\x2TV\a\x12\x2\x2UW\x5\x14\v\x2VU\x3\x2\x2\x2VW\x3\x2"+
		"\x2\x2WX\x3\x2\x2\x2Xi\x5\n\x6\x2YZ\a\x6\x2\x2Zi\x5\x16\f\x2[\\\a\n\x2"+
		"\x2\\]\x5\b\x5\x2]^\a\v\x2\x2^i\x3\x2\x2\x2_i\x5\x12\n\x2`i\a\x15\x2\x2"+
		"\x61i\a\x16\x2\x2\x62i\a\x13\x2\x2\x63i\a\x14\x2\x2\x64i\a\x19\x2\x2\x65"+
		"i\a\x18\x2\x2\x66i\a\x17\x2\x2gi\a\x1A\x2\x2h?\x3\x2\x2\x2hN\x3\x2\x2"+
		"\x2hR\x3\x2\x2\x2hY\x3\x2\x2\x2h[\x3\x2\x2\x2h_\x3\x2\x2\x2h`\x3\x2\x2"+
		"\x2h\x61\x3\x2\x2\x2h\x62\x3\x2\x2\x2h\x63\x3\x2\x2\x2h\x64\x3\x2\x2\x2"+
		"h\x65\x3\x2\x2\x2h\x66\x3\x2\x2\x2hg\x3\x2\x2\x2it\x3\x2\x2\x2jk\f\f\x2"+
		"\x2kl\a\x11\x2\x2ls\x5\b\x5\rmn\f\v\x2\x2no\a\a\x2\x2os\x5\b\x5\fpq\f"+
		"\x10\x2\x2qs\x5\x18\r\x2rj\x3\x2\x2\x2rm\x3\x2\x2\x2rp\x3\x2\x2\x2sv\x3"+
		"\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2u\t\x3\x2\x2\x2vt\x3\x2\x2\x2wx\a"+
		"\n\x2\x2x\x85\a\v\x2\x2yz\a\n\x2\x2z\x7F\x5\b\x5\x2{|\a\x10\x2\x2|~\x5"+
		"\b\x5\x2}{\x3\x2\x2\x2~\x81\x3\x2\x2\x2\x7F}\x3\x2\x2\x2\x7F\x80\x3\x2"+
		"\x2\x2\x80\x82\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x82\x83\a\v\x2\x2\x83\x85"+
		"\x3\x2\x2\x2\x84w\x3\x2\x2\x2\x84y\x3\x2\x2\x2\x85\v\x3\x2\x2\x2\x86\x8B"+
		"\x5\xE\b\x2\x87\x88\a\x11\x2\x2\x88\x8A\x5\xE\b\x2\x89\x87\x3\x2\x2\x2"+
		"\x8A\x8D\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\r\x3"+
		"\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8E\x90\a\x12\x2\x2\x8F\x91\x5\x14\v\x2"+
		"\x90\x8F\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\xF\x3\x2\x2\x2\x92\x93\a"+
		"\f\x2\x2\x93\x94\a\r\x2\x2\x94\x11\x3\x2\x2\x2\x95\x97\a\x12\x2\x2\x96"+
		"\x98\x5\x14\v\x2\x97\x96\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x13\x3\x2"+
		"\x2\x2\x99\x9A\a\b\x2\x2\x9A\x9F\x5\f\a\x2\x9B\x9C\a\x10\x2\x2\x9C\x9E"+
		"\x5\f\a\x2\x9D\x9B\x3\x2\x2\x2\x9E\xA1\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2"+
		"\x9F\xA0\x3\x2\x2\x2\xA0\xA2\x3\x2\x2\x2\xA1\x9F\x3\x2\x2\x2\xA2\xA3\a"+
		"\t\x2\x2\xA3\x15\x3\x2\x2\x2\xA4\xA9\a\x12\x2\x2\xA5\xA6\v\x2\x2\x2\xA6"+
		"\xA8\a\x12\x2\x2\xA7\xA5\x3\x2\x2\x2\xA8\xAB\x3\x2\x2\x2\xA9\xA7\x3\x2"+
		"\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\x17\x3\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAC"+
		"\xAE\a\f\x2\x2\xAD\xAF\x5\b\x5\x2\xAE\xAD\x3\x2\x2\x2\xAE\xAF\x3\x2\x2"+
		"\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\a\r\x2\x2\xB1\x19\x3\x2\x2\x2\xB2\xB6"+
		"\x5\x1C\xF\x2\xB3\xB6\x5 \x11\x2\xB4\xB6\x5\"\x12\x2\xB5\xB2\x3\x2\x2"+
		"\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB4\x3\x2\x2\x2\xB6\x1B\x3\x2\x2\x2\xB7\xB8"+
		"\a\xE\x2\x2\xB8\xBD\x5\x1E\x10\x2\xB9\xBA\a\x10\x2\x2\xBA\xBC\x5\x1E\x10"+
		"\x2\xBB\xB9\x3\x2\x2\x2\xBC\xBF\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBD\xBE"+
		"\x3\x2\x2\x2\xBE\xC1\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xC0\xC2\a\x10\x2"+
		"\x2\xC1\xC0\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4"+
		"\a\xF\x2\x2\xC4\x1D\x3\x2\x2\x2\xC5\xC6\a\x12\x2\x2\xC6\xC7\a\a\x2\x2"+
		"\xC7\xC8\x5\b\x5\x2\xC8\x1F\x3\x2\x2\x2\xC9\xCA\a\xE\x2\x2\xCA\xCF\x5"+
		"\b\x5\x2\xCB\xCC\a\x10\x2\x2\xCC\xCE\x5\b\x5\x2\xCD\xCB\x3\x2\x2\x2\xCE"+
		"\xD1\x3\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\xD2\x3\x2"+
		"\x2\x2\xD1\xCF\x3\x2\x2\x2\xD2\xD3\a\xF\x2\x2\xD3!\x3\x2\x2\x2\xD4\xD5"+
		"\a\xE\x2\x2\xD5\xDA\x5$\x13\x2\xD6\xD7\a\x10\x2\x2\xD7\xD9\x5$\x13\x2"+
		"\xD8\xD6\x3\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB\x3"+
		"\x2\x2\x2\xDB\xDE\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDD\xDF\a\x10\x2\x2"+
		"\xDE\xDD\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE1\a"+
		"\xF\x2\x2\xE1#\x3\x2\x2\x2\xE2\xE3\a\xE\x2\x2\xE3\xE4\x5\b\x5\x2\xE4\xE5"+
		"\a\x10\x2\x2\xE5\xE6\x5\b\x5\x2\xE6\xE7\a\xF\x2\x2\xE7%\x3\x2\x2\x2\x1D"+
		")/\x34:\x44GLNRVhrt\x7F\x84\x8B\x90\x97\x9F\xA9\xAE\xB5\xBD\xC1\xCF\xDA"+
		"\xDE";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
