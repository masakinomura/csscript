//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSScript.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

#pragma warning disable 3021
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class CSScriptParser : Parser {
	public const int
		EOL=1, VAR=2, NEW=3, USING=4, OP_ASSIGN=5, OP_MUL=6, OP_PLUS=7, LESS_THAN=8, 
		GREATER_THAN=9, PARENTHESIS_START=10, PARENTHESIS_END=11, RECTANGLE_BRACE_START=12, 
		RECTANGLE_BRACE_END=13, CURLY_BRACE_START=14, CURLY_BRACE_END=15, COMMA=16, 
		DOT=17, NAME=18, INT=19, UINT=20, LONG=21, ULONG=22, FLOAT=23, DOUBLE=24, 
		DECIMAL=25, STRING=26, WHITESPACE=27, NEWLINE=28;
	public const int
		RULE_code = 0, RULE_line = 1, RULE_block = 2, RULE_expression = 3, RULE_parameters = 4, 
		RULE_type = 5, RULE_type_elements = 6, RULE_type_element = 7, RULE_arraytype = 8, 
		RULE_selector = 9, RULE_generic_parameters = 10, RULE_namespace = 11, 
		RULE_array_index = 12, RULE_initializer = 13, RULE_class_initializer = 14, 
		RULE_class_initializer_element = 15, RULE_array_initializer = 16, RULE_dictionary_initializer = 17, 
		RULE_dictionary_initializer_element = 18;
	public static readonly string[] ruleNames = {
		"code", "line", "block", "expression", "parameters", "type", "type_elements", 
		"type_element", "arraytype", "selector", "generic_parameters", "namespace", 
		"array_index", "initializer", "class_initializer", "class_initializer_element", 
		"array_initializer", "dictionary_initializer", "dictionary_initializer_element"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'var'", "'new'", "'using'", "'='", "'*'", "'+'", "'<'", 
		"'>'", "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "VAR", "NEW", "USING", "OP_ASSIGN", "OP_MUL", "OP_PLUS", 
		"LESS_THAN", "GREATER_THAN", "PARENTHESIS_START", "PARENTHESIS_END", "RECTANGLE_BRACE_START", 
		"RECTANGLE_BRACE_END", "CURLY_BRACE_START", "CURLY_BRACE_END", "COMMA", 
		"DOT", "NAME", "INT", "UINT", "LONG", "ULONG", "FLOAT", "DOUBLE", "DECIMAL", 
		"STRING", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CSScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CodeContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << USING) | (1L << PARENTHESIS_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0)) {
				{
				{
				State = 38; line();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 44; expression(0);
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << USING) | (1L << PARENTHESIS_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0) );
			State = 49; Match(EOL);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode CURLY_BRACE_START() { return GetToken(CSScriptParser.CURLY_BRACE_START, 0); }
		public ITerminalNode CURLY_BRACE_END() { return GetToken(CSScriptParser.CURLY_BRACE_END, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(CURLY_BRACE_START);
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << USING) | (1L << PARENTHESIS_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0)) {
				{
				{
				State = 52; line();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 58; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UlongAtomExpContext : ExpressionContext {
		public ITerminalNode ULONG() { return GetToken(CSScriptParser.ULONG, 0); }
		public UlongAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUlongAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DotExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(CSScriptParser.DOT, 0); }
		public DotExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UsingNamespaceExpContext : ExpressionContext {
		public ITerminalNode USING() { return GetToken(CSScriptParser.USING, 0); }
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public UsingNamespaceExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsingNamespaceExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpContext : ExpressionContext {
		public ITerminalNode NEW() { return GetToken(CSScriptParser.NEW, 0); }
		public Type_elementsContext type_elements() {
			return GetRuleContext<Type_elementsContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public Array_indexContext array_index() {
			return GetRuleContext<Array_indexContext>(0);
		}
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public NewExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncExpContext : ExpressionContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public SelectorContext[] selector() {
			return GetRuleContexts<SelectorContext>();
		}
		public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public FuncExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_PLUS() { return GetToken(CSScriptParser.OP_PLUS, 0); }
		public PlusExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectorExpContext : ExpressionContext {
		public SelectorContext[] selector() {
			return GetRuleContexts<SelectorContext>();
		}
		public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		public SelectorExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_ASSIGN() { return GetToken(CSScriptParser.OP_ASSIGN, 0); }
		public AssignmentExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisaExpContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisaExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisaExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomExpContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(CSScriptParser.STRING, 0); }
		public StringAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatAtomExpContext : ExpressionContext {
		public ITerminalNode FLOAT() { return GetToken(CSScriptParser.FLOAT, 0); }
		public FloatAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayIndexExpContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_indexContext array_index() {
			return GetRuleContext<Array_indexContext>(0);
		}
		public ArrayIndexExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarDeclExpContext : ExpressionContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public ITerminalNode VAR() { return GetToken(CSScriptParser.VAR, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VarDeclExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntAtomExpContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(CSScriptParser.INT, 0); }
		public IntAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleAtomExpContext : ExpressionContext {
		public ITerminalNode DECIMAL() { return GetToken(CSScriptParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSScriptParser.DOUBLE, 0); }
		public DoubleAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UintAtomExpContext : ExpressionContext {
		public ITerminalNode UINT() { return GetToken(CSScriptParser.UINT, 0); }
		public UintAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUintAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongAtomExpContext : ExpressionContext {
		public ITerminalNode LONG() { return GetToken(CSScriptParser.LONG, 0); }
		public LongAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new NewExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 61; Match(NEW);
				State = 62; type_elements();
				State = 65;
				switch (TokenStream.La(1)) {
				case PARENTHESIS_START:
					{
					State = 63; parameters();
					}
					break;
				case RECTANGLE_BRACE_START:
					{
					State = 64; array_index();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 68;
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 67; initializer();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new FuncExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 75;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 70; selector();
						State = 71; Match(DOT);
						}
						} 
					}
					State = 77;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				}
				State = 78; Match(NAME);
				State = 80;
				_la = TokenStream.La(1);
				if (_la==LESS_THAN) {
					{
					State = 79; generic_parameters();
					}
				}

				State = 82; parameters();
				}
				break;
			case 3:
				{
				_localctx = new VarDeclExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 85;
				switch (TokenStream.La(1)) {
				case VAR:
					{
					State = 83; Match(VAR);
					}
					break;
				case NAME:
					{
					State = 84; type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 87; Match(NAME);
				}
				break;
			case 4:
				{
				_localctx = new UsingNamespaceExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 88; Match(USING);
				State = 89; @namespace();
				}
				break;
			case 5:
				{
				_localctx = new ParenthesisaExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 90; Match(PARENTHESIS_START);
				State = 91; expression(0);
				State = 92; Match(PARENTHESIS_END);
				}
				break;
			case 6:
				{
				_localctx = new SelectorExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 94; selector();
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 95; Match(DOT);
						State = 96; selector();
						}
						} 
					}
					State = 101;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				}
				break;
			case 7:
				{
				_localctx = new LongAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102; Match(LONG);
				}
				break;
			case 8:
				{
				_localctx = new UlongAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 103; Match(ULONG);
				}
				break;
			case 9:
				{
				_localctx = new IntAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 104; Match(INT);
				}
				break;
			case 10:
				{
				_localctx = new UintAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 105; Match(UINT);
				}
				break;
			case 11:
				{
				_localctx = new DoubleAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 106; Match(DECIMAL);
				}
				break;
			case 12:
				{
				_localctx = new DoubleAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 107; Match(DOUBLE);
				}
				break;
			case 13:
				{
				_localctx = new FloatAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 108; Match(FLOAT);
				}
				break;
			case 14:
				{
				_localctx = new StringAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 109; Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 125;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 123;
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new DotExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 112;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 113; Match(DOT);
						State = 114; expression(15);
						}
						break;
					case 2:
						{
						_localctx = new AssignmentExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 115;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 116; Match(OP_ASSIGN);
						State = 117; expression(12);
						}
						break;
					case 3:
						{
						_localctx = new PlusExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 118;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 119; Match(OP_PLUS);
						State = 120; expression(11);
						}
						break;
					case 4:
						{
						_localctx = new ArrayIndexExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 121;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 122; array_index();
						}
						break;
					}
					} 
				}
				State = 127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 8, RULE_parameters);
		int _la;
		try {
			State = 141;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; Match(PARENTHESIS_START);
				State = 129; Match(PARENTHESIS_END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130; Match(PARENTHESIS_START);
				State = 131; expression(0);
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 132; Match(COMMA);
					State = 133; expression(0);
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 139; Match(PARENTHESIS_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Type_elementsContext type_elements() {
			return GetRuleContext<Type_elementsContext>(0);
		}
		public ArraytypeContext arraytype() {
			return GetRuleContext<ArraytypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; type_elements();
			State = 145;
			_la = TokenStream.La(1);
			if (_la==RECTANGLE_BRACE_START) {
				{
				State = 144; arraytype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_elementsContext : ParserRuleContext {
		public Type_elementContext[] type_element() {
			return GetRuleContexts<Type_elementContext>();
		}
		public Type_elementContext type_element(int i) {
			return GetRuleContext<Type_elementContext>(i);
		}
		public Type_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_elementsContext type_elements() {
		Type_elementsContext _localctx = new Type_elementsContext(Context, State);
		EnterRule(_localctx, 12, RULE_type_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; type_element();
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 148; Match(DOT);
				State = 149; type_element();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_elementContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public Type_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_elementContext type_element() {
		Type_elementContext _localctx = new Type_elementContext(Context, State);
		EnterRule(_localctx, 14, RULE_type_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(NAME);
			State = 157;
			_la = TokenStream.La(1);
			if (_la==LESS_THAN) {
				{
				State = 156; generic_parameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraytypeContext : ParserRuleContext {
		public ArraytypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraytype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArraytype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArraytypeContext arraytype() {
		ArraytypeContext _localctx = new ArraytypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_arraytype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(RECTANGLE_BRACE_START);
			State = 160; Match(RECTANGLE_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 18, RULE_selector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(NAME);
			State = 164;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 163; generic_parameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parametersContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public Generic_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parametersContext generic_parameters() {
		Generic_parametersContext _localctx = new Generic_parametersContext(Context, State);
		EnterRule(_localctx, 20, RULE_generic_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(LESS_THAN);
			State = 167; type();
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 168; Match(COMMA);
				State = 169; type();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 175; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(CSScriptParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(CSScriptParser.NAME, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 22, RULE_namespace);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(NAME);
			State = 182;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 178;
					MatchWildcard();
					State = 179; Match(NAME);
					}
					} 
				}
				State = 184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_indexContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_indexContext array_index() {
		Array_indexContext _localctx = new Array_indexContext(Context, State);
		EnterRule(_localctx, 24, RULE_array_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(RECTANGLE_BRACE_START);
			State = 187;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << USING) | (1L << PARENTHESIS_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0)) {
				{
				State = 186; expression(0);
				}
			}

			State = 189; Match(RECTANGLE_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public Class_initializerContext class_initializer() {
			return GetRuleContext<Class_initializerContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Dictionary_initializerContext dictionary_initializer() {
			return GetRuleContext<Dictionary_initializerContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 26, RULE_initializer);
		try {
			State = 194;
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; class_initializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192; array_initializer();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 193; dictionary_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_initializerContext : ParserRuleContext {
		public Class_initializer_elementContext[] class_initializer_element() {
			return GetRuleContexts<Class_initializer_elementContext>();
		}
		public Class_initializer_elementContext class_initializer_element(int i) {
			return GetRuleContext<Class_initializer_elementContext>(i);
		}
		public Class_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_initializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_initializerContext class_initializer() {
		Class_initializerContext _localctx = new Class_initializerContext(Context, State);
		EnterRule(_localctx, 28, RULE_class_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(CURLY_BRACE_START);
			State = 197; class_initializer_element();
			State = 202;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 198; Match(COMMA);
					State = 199; class_initializer_element();
					}
					} 
				}
				State = 204;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 206;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 205; Match(COMMA);
				}
			}

			State = 208; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_initializer_elementContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Class_initializer_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_initializer_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_initializer_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_initializer_elementContext class_initializer_element() {
		Class_initializer_elementContext _localctx = new Class_initializer_elementContext(Context, State);
		EnterRule(_localctx, 30, RULE_class_initializer_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(NAME);
			State = 211; Match(OP_ASSIGN);
			State = 212; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(Context, State);
		EnterRule(_localctx, 32, RULE_array_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(CURLY_BRACE_START);
			State = 215; expression(0);
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 216; Match(COMMA);
				State = 217; expression(0);
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 223; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dictionary_initializerContext : ParserRuleContext {
		public Dictionary_initializer_elementContext[] dictionary_initializer_element() {
			return GetRuleContexts<Dictionary_initializer_elementContext>();
		}
		public Dictionary_initializer_elementContext dictionary_initializer_element(int i) {
			return GetRuleContext<Dictionary_initializer_elementContext>(i);
		}
		public Dictionary_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary_initializer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dictionary_initializerContext dictionary_initializer() {
		Dictionary_initializerContext _localctx = new Dictionary_initializerContext(Context, State);
		EnterRule(_localctx, 34, RULE_dictionary_initializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; Match(CURLY_BRACE_START);
			State = 226; dictionary_initializer_element();
			State = 231;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 227; Match(COMMA);
					State = 228; dictionary_initializer_element();
					}
					} 
				}
				State = 233;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 235;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 234; Match(COMMA);
				}
			}

			State = 237; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dictionary_initializer_elementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Dictionary_initializer_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary_initializer_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary_initializer_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dictionary_initializer_elementContext dictionary_initializer_element() {
		Dictionary_initializer_elementContext _localctx = new Dictionary_initializer_elementContext(Context, State);
		EnterRule(_localctx, 36, RULE_dictionary_initializer_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239; Match(CURLY_BRACE_START);
			State = 240; expression(0);
			State = 241; Match(COMMA);
			State = 242; expression(0);
			State = 243; Match(CURLY_BRACE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 13);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1E\xF8\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\a\x2"+
		"*\n\x2\f\x2\xE\x2-\v\x2\x3\x3\x6\x3\x30\n\x3\r\x3\xE\x3\x31\x3\x3\x3\x3"+
		"\x3\x4\x3\x4\a\x4\x38\n\x4\f\x4\xE\x4;\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x5\x5\x44\n\x5\x3\x5\x5\x5G\n\x5\x3\x5\x3\x5\x3\x5\a\x5"+
		"L\n\x5\f\x5\xE\x5O\v\x5\x3\x5\x3\x5\x5\x5S\n\x5\x3\x5\x3\x5\x3\x5\x5\x5"+
		"X\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5"+
		"\x64\n\x5\f\x5\xE\x5g\v\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x5\x5q\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\a\x5~\n\x5\f\x5\xE\x5\x81\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\a\x6\x89\n\x6\f\x6\xE\x6\x8C\v\x6\x3\x6\x3\x6\x5\x6\x90\n\x6"+
		"\x3\a\x3\a\x5\a\x94\n\a\x3\b\x3\b\x3\b\a\b\x99\n\b\f\b\xE\b\x9C\v\b\x3"+
		"\t\x3\t\x5\t\xA0\n\t\x3\n\x3\n\x3\n\x3\v\x3\v\x5\v\xA7\n\v\x3\f\x3\f\x3"+
		"\f\x3\f\a\f\xAD\n\f\f\f\xE\f\xB0\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\a\r\xB7"+
		"\n\r\f\r\xE\r\xBA\v\r\x3\xE\x3\xE\x5\xE\xBE\n\xE\x3\xE\x3\xE\x3\xF\x3"+
		"\xF\x3\xF\x5\xF\xC5\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\xCB\n\x10\f"+
		"\x10\xE\x10\xCE\v\x10\x3\x10\x5\x10\xD1\n\x10\x3\x10\x3\x10\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\xDD\n\x12\f\x12\xE"+
		"\x12\xE0\v\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\a\x13\xE8\n\x13"+
		"\f\x13\xE\x13\xEB\v\x13\x3\x13\x5\x13\xEE\n\x13\x3\x13\x3\x13\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x2\x3\b\x15\x2\x4\x6\b\n\f\xE"+
		"\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&\x2\x2\x10E\x2+\x3\x2\x2\x2\x4/\x3"+
		"\x2\x2\x2\x6\x35\x3\x2\x2\x2\bp\x3\x2\x2\x2\n\x8F\x3\x2\x2\x2\f\x91\x3"+
		"\x2\x2\x2\xE\x95\x3\x2\x2\x2\x10\x9D\x3\x2\x2\x2\x12\xA1\x3\x2\x2\x2\x14"+
		"\xA4\x3\x2\x2\x2\x16\xA8\x3\x2\x2\x2\x18\xB3\x3\x2\x2\x2\x1A\xBB\x3\x2"+
		"\x2\x2\x1C\xC4\x3\x2\x2\x2\x1E\xC6\x3\x2\x2\x2 \xD4\x3\x2\x2\x2\"\xD8"+
		"\x3\x2\x2\x2$\xE3\x3\x2\x2\x2&\xF1\x3\x2\x2\x2(*\x5\x4\x3\x2)(\x3\x2\x2"+
		"\x2*-\x3\x2\x2\x2+)\x3\x2\x2\x2+,\x3\x2\x2\x2,\x3\x3\x2\x2\x2-+\x3\x2"+
		"\x2\x2.\x30\x5\b\x5\x2/.\x3\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31/\x3\x2\x2"+
		"\x2\x31\x32\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x34\a\x3\x2\x2\x34\x5"+
		"\x3\x2\x2\x2\x35\x39\a\x10\x2\x2\x36\x38\x5\x4\x3\x2\x37\x36\x3\x2\x2"+
		"\x2\x38;\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39:\x3\x2\x2\x2:<\x3\x2\x2\x2"+
		";\x39\x3\x2\x2\x2<=\a\x11\x2\x2=\a\x3\x2\x2\x2>?\b\x5\x1\x2?@\a\x5\x2"+
		"\x2@\x43\x5\xE\b\x2\x41\x44\x5\n\x6\x2\x42\x44\x5\x1A\xE\x2\x43\x41\x3"+
		"\x2\x2\x2\x43\x42\x3\x2\x2\x2\x44\x46\x3\x2\x2\x2\x45G\x5\x1C\xF\x2\x46"+
		"\x45\x3\x2\x2\x2\x46G\x3\x2\x2\x2Gq\x3\x2\x2\x2HI\x5\x14\v\x2IJ\a\x13"+
		"\x2\x2JL\x3\x2\x2\x2KH\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3\x2"+
		"\x2\x2NP\x3\x2\x2\x2OM\x3\x2\x2\x2PR\a\x14\x2\x2QS\x5\x16\f\x2RQ\x3\x2"+
		"\x2\x2RS\x3\x2\x2\x2ST\x3\x2\x2\x2Tq\x5\n\x6\x2UX\a\x4\x2\x2VX\x5\f\a"+
		"\x2WU\x3\x2\x2\x2WV\x3\x2\x2\x2XY\x3\x2\x2\x2Yq\a\x14\x2\x2Z[\a\x6\x2"+
		"\x2[q\x5\x18\r\x2\\]\a\f\x2\x2]^\x5\b\x5\x2^_\a\r\x2\x2_q\x3\x2\x2\x2"+
		"`\x65\x5\x14\v\x2\x61\x62\a\x13\x2\x2\x62\x64\x5\x14\v\x2\x63\x61\x3\x2"+
		"\x2\x2\x64g\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66q\x3"+
		"\x2\x2\x2g\x65\x3\x2\x2\x2hq\a\x17\x2\x2iq\a\x18\x2\x2jq\a\x15\x2\x2k"+
		"q\a\x16\x2\x2lq\a\x1B\x2\x2mq\a\x1A\x2\x2nq\a\x19\x2\x2oq\a\x1C\x2\x2"+
		"p>\x3\x2\x2\x2pM\x3\x2\x2\x2pW\x3\x2\x2\x2pZ\x3\x2\x2\x2p\\\x3\x2\x2\x2"+
		"p`\x3\x2\x2\x2ph\x3\x2\x2\x2pi\x3\x2\x2\x2pj\x3\x2\x2\x2pk\x3\x2\x2\x2"+
		"pl\x3\x2\x2\x2pm\x3\x2\x2\x2pn\x3\x2\x2\x2po\x3\x2\x2\x2q\x7F\x3\x2\x2"+
		"\x2rs\f\x10\x2\x2st\a\x13\x2\x2t~\x5\b\x5\x11uv\f\r\x2\x2vw\a\a\x2\x2"+
		"w~\x5\b\x5\xExy\f\f\x2\x2yz\a\t\x2\x2z~\x5\b\x5\r{|\f\xF\x2\x2|~\x5\x1A"+
		"\xE\x2}r\x3\x2\x2\x2}u\x3\x2\x2\x2}x\x3\x2\x2\x2}{\x3\x2\x2\x2~\x81\x3"+
		"\x2\x2\x2\x7F}\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80\t\x3\x2\x2\x2\x81\x7F"+
		"\x3\x2\x2\x2\x82\x83\a\f\x2\x2\x83\x90\a\r\x2\x2\x84\x85\a\f\x2\x2\x85"+
		"\x8A\x5\b\x5\x2\x86\x87\a\x12\x2\x2\x87\x89\x5\b\x5\x2\x88\x86\x3\x2\x2"+
		"\x2\x89\x8C\x3\x2\x2\x2\x8A\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8D"+
		"\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8D\x8E\a\r\x2\x2\x8E\x90\x3\x2\x2\x2"+
		"\x8F\x82\x3\x2\x2\x2\x8F\x84\x3\x2\x2\x2\x90\v\x3\x2\x2\x2\x91\x93\x5"+
		"\xE\b\x2\x92\x94\x5\x12\n\x2\x93\x92\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94"+
		"\r\x3\x2\x2\x2\x95\x9A\x5\x10\t\x2\x96\x97\a\x13\x2\x2\x97\x99\x5\x10"+
		"\t\x2\x98\x96\x3\x2\x2\x2\x99\x9C\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9A"+
		"\x9B\x3\x2\x2\x2\x9B\xF\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9D\x9F\a\x14"+
		"\x2\x2\x9E\xA0\x5\x16\f\x2\x9F\x9E\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0"+
		"\x11\x3\x2\x2\x2\xA1\xA2\a\xE\x2\x2\xA2\xA3\a\xF\x2\x2\xA3\x13\x3\x2\x2"+
		"\x2\xA4\xA6\a\x14\x2\x2\xA5\xA7\x5\x16\f\x2\xA6\xA5\x3\x2\x2\x2\xA6\xA7"+
		"\x3\x2\x2\x2\xA7\x15\x3\x2\x2\x2\xA8\xA9\a\n\x2\x2\xA9\xAE\x5\f\a\x2\xAA"+
		"\xAB\a\x12\x2\x2\xAB\xAD\x5\f\a\x2\xAC\xAA\x3\x2\x2\x2\xAD\xB0\x3\x2\x2"+
		"\x2\xAE\xAC\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB1\x3\x2\x2\x2\xB0\xAE"+
		"\x3\x2\x2\x2\xB1\xB2\a\v\x2\x2\xB2\x17\x3\x2\x2\x2\xB3\xB8\a\x14\x2\x2"+
		"\xB4\xB5\v\x2\x2\x2\xB5\xB7\a\x14\x2\x2\xB6\xB4\x3\x2\x2\x2\xB7\xBA\x3"+
		"\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\x19\x3\x2\x2\x2"+
		"\xBA\xB8\x3\x2\x2\x2\xBB\xBD\a\xE\x2\x2\xBC\xBE\x5\b\x5\x2\xBD\xBC\x3"+
		"\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC0\a\xF\x2\x2\xC0"+
		"\x1B\x3\x2\x2\x2\xC1\xC5\x5\x1E\x10\x2\xC2\xC5\x5\"\x12\x2\xC3\xC5\x5"+
		"$\x13\x2\xC4\xC1\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC3\x3\x2\x2\x2\xC5"+
		"\x1D\x3\x2\x2\x2\xC6\xC7\a\x10\x2\x2\xC7\xCC\x5 \x11\x2\xC8\xC9\a\x12"+
		"\x2\x2\xC9\xCB\x5 \x11\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCE\x3\x2\x2\x2\xCC"+
		"\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2"+
		"\x2\x2\xCF\xD1\a\x12\x2\x2\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1"+
		"\xD2\x3\x2\x2\x2\xD2\xD3\a\x11\x2\x2\xD3\x1F\x3\x2\x2\x2\xD4\xD5\a\x14"+
		"\x2\x2\xD5\xD6\a\a\x2\x2\xD6\xD7\x5\b\x5\x2\xD7!\x3\x2\x2\x2\xD8\xD9\a"+
		"\x10\x2\x2\xD9\xDE\x5\b\x5\x2\xDA\xDB\a\x12\x2\x2\xDB\xDD\x5\b\x5\x2\xDC"+
		"\xDA\x3\x2\x2\x2\xDD\xE0\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDE\xDF\x3\x2"+
		"\x2\x2\xDF\xE1\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE1\xE2\a\x11\x2\x2\xE2"+
		"#\x3\x2\x2\x2\xE3\xE4\a\x10\x2\x2\xE4\xE9\x5&\x14\x2\xE5\xE6\a\x12\x2"+
		"\x2\xE6\xE8\x5&\x14\x2\xE7\xE5\x3\x2\x2\x2\xE8\xEB\x3\x2\x2\x2\xE9\xE7"+
		"\x3\x2\x2\x2\xE9\xEA\x3\x2\x2\x2\xEA\xED\x3\x2\x2\x2\xEB\xE9\x3\x2\x2"+
		"\x2\xEC\xEE\a\x12\x2\x2\xED\xEC\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xEF"+
		"\x3\x2\x2\x2\xEF\xF0\a\x11\x2\x2\xF0%\x3\x2\x2\x2\xF1\xF2\a\x10\x2\x2"+
		"\xF2\xF3\x5\b\x5\x2\xF3\xF4\a\x12\x2\x2\xF4\xF5\x5\b\x5\x2\xF5\xF6\a\x11"+
		"\x2\x2\xF6\'\x3\x2\x2\x2\x1D+\x31\x39\x43\x46MRW\x65p}\x7F\x8A\x8F\x93"+
		"\x9A\x9F\xA6\xAE\xB8\xBD\xC4\xCC\xD0\xDE\xE9\xED";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
