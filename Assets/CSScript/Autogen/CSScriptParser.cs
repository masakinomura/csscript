//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CSScript.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

#pragma warning disable 3021
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class CSScriptParser : Parser {
	public const int
		OP_MUL=1, VAR=2, NEW=3, OP_ASSIGN=4, LESS_THAN=5, GREATER_THAN=6, PARENTHESIS_START=7, 
		PARENTHESIS_END=8, COMMA=9, DOT=10, NAME=11, INT=12, UINT=13, LONG=14, 
		ULONG=15, FLOAT=16, DOUBLE=17, DECIMAL=18, STRING=19, EOL=20, WHITESPACE=21;
	public const int
		RULE_code = 0, RULE_line = 1, RULE_expression = 2, RULE_variable = 3, 
		RULE_parameters = 4, RULE_vartypes = 5, RULE_vartype = 6, RULE_generic_parameters = 7;
	public static readonly string[] ruleNames = {
		"code", "line", "expression", "variable", "parameters", "vartypes", "vartype", 
		"generic_parameters"
	};

	private static readonly string[] _LiteralNames = {
		null, "'*'", null, null, "'='", "'<'", "'>'", "'('", "')'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OP_MUL", "VAR", "NEW", "OP_ASSIGN", "LESS_THAN", "GREATER_THAN", 
		"PARENTHESIS_START", "PARENTHESIS_END", "COMMA", "DOT", "NAME", "INT", 
		"UINT", "LONG", "ULONG", "FLOAT", "DOUBLE", "DECIMAL", "STRING", "EOL", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CSScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CodeContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 0, RULE_code);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << PARENTHESIS_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0)) {
				{
				{
				State = 16; line();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode EOL() { return GetToken(CSScriptParser.EOL, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 22; expression(0);
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAR) | (1L << NEW) | (1L << PARENTHESIS_START) | (1L << NAME) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << ULONG) | (1L << FLOAT) | (1L << DOUBLE) | (1L << DECIMAL) | (1L << STRING))) != 0) );
			State = 27; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UlongAtomExpContext : ExpressionContext {
		public ITerminalNode ULONG() { return GetToken(CSScriptParser.ULONG, 0); }
		public UlongAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUlongAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NewExpContext : ExpressionContext {
		public ITerminalNode NEW() { return GetToken(CSScriptParser.NEW, 0); }
		public VartypesContext vartypes() {
			return GetRuleContext<VartypesContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public NewExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncExpContext : ExpressionContext {
		public VartypesContext vartypes() {
			return GetRuleContext<VartypesContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public FuncExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAtomExpContext : ExpressionContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public IdAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_ASSIGN() { return GetToken(CSScriptParser.OP_ASSIGN, 0); }
		public AssignmentExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarExpContext : ExpressionContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VarExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomExpContext : ExpressionContext {
		public ITerminalNode STRING() { return GetToken(CSScriptParser.STRING, 0); }
		public StringAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatAtomExpContext : ExpressionContext {
		public ITerminalNode FLOAT() { return GetToken(CSScriptParser.FLOAT, 0); }
		public FloatAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntAtomExpContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(CSScriptParser.INT, 0); }
		public IntAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleAtomExpContext : ExpressionContext {
		public ITerminalNode DECIMAL() { return GetToken(CSScriptParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSScriptParser.DOUBLE, 0); }
		public DoubleAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UintAtomExpContext : ExpressionContext {
		public ITerminalNode UINT() { return GetToken(CSScriptParser.UINT, 0); }
		public UintAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUintAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongAtomExpContext : ExpressionContext {
		public ITerminalNode LONG() { return GetToken(CSScriptParser.LONG, 0); }
		public LongAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongAtomExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 30; Match(PARENTHESIS_START);
				State = 31; expression(0);
				State = 32; Match(PARENTHESIS_END);
				}
				break;
			case 2:
				{
				_localctx = new NewExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 34; Match(NEW);
				State = 35; vartypes();
				State = 36; parameters();
				}
				break;
			case 3:
				{
				_localctx = new FuncExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 38; vartypes();
				State = 39; parameters();
				}
				break;
			case 4:
				{
				_localctx = new VarExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 41; variable();
				}
				break;
			case 5:
				{
				_localctx = new IdAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 42; Match(NAME);
				}
				break;
			case 6:
				{
				_localctx = new LongAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 43; Match(LONG);
				}
				break;
			case 7:
				{
				_localctx = new UlongAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 44; Match(ULONG);
				}
				break;
			case 8:
				{
				_localctx = new IntAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 45; Match(INT);
				}
				break;
			case 9:
				{
				_localctx = new UintAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 46; Match(UINT);
				}
				break;
			case 10:
				{
				_localctx = new DoubleAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 47; Match(DECIMAL);
				}
				break;
			case 11:
				{
				_localctx = new DoubleAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 48; Match(DOUBLE);
				}
				break;
			case 12:
				{
				_localctx = new FloatAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 49; Match(FLOAT);
				}
				break;
			case 13:
				{
				_localctx = new StringAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 50; Match(STRING);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 58;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AssignmentExpContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 53;
					if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
					State = 54; Match(OP_ASSIGN);
					State = 55; expression(12);
					}
					} 
				}
				State = 60;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(CSScriptParser.VAR, 0); }
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 6, RULE_variable);
		try {
			State = 64;
			switch (TokenStream.La(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; Match(VAR);
				State = 62; Match(NAME);
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 8, RULE_parameters);
		int _la;
		try {
			State = 79;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; Match(PARENTHESIS_START);
				State = 67; Match(PARENTHESIS_END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68; Match(PARENTHESIS_START);
				State = 69; expression(0);
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 70; Match(COMMA);
					State = 71; expression(0);
					}
					}
					State = 76;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 77; Match(PARENTHESIS_END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VartypesContext : ParserRuleContext {
		public VartypeContext[] vartype() {
			return GetRuleContexts<VartypeContext>();
		}
		public VartypeContext vartype(int i) {
			return GetRuleContext<VartypeContext>(i);
		}
		public VartypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vartypes; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVartypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VartypesContext vartypes() {
		VartypesContext _localctx = new VartypesContext(Context, State);
		EnterRule(_localctx, 10, RULE_vartypes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; vartype();
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 82; Match(DOT);
				State = 83; vartype();
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VartypeContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CSScriptParser.NAME, 0); }
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public VartypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vartype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVartype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VartypeContext vartype() {
		VartypeContext _localctx = new VartypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_vartype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(NAME);
			State = 91;
			_la = TokenStream.La(1);
			if (_la==LESS_THAN) {
				{
				State = 90; generic_parameters();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parametersContext : ParserRuleContext {
		public VartypesContext[] vartypes() {
			return GetRuleContexts<VartypesContext>();
		}
		public VartypesContext vartypes(int i) {
			return GetRuleContext<VartypesContext>(i);
		}
		public Generic_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSScriptVisitor<TResult> typedVisitor = visitor as ICSScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parametersContext generic_parameters() {
		Generic_parametersContext _localctx = new Generic_parametersContext(Context, State);
		EnterRule(_localctx, 14, RULE_generic_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(LESS_THAN);
			State = 94; vartypes();
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 95; Match(COMMA);
				State = 96; vartypes();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 102; Match(GREATER_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x17k\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x3\x2\a\x2\x14\n\x2\f\x2\xE\x2\x17\v\x2\x3\x3\x6\x3\x1A\n\x3\r\x3\xE"+
		"\x3\x1B\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x5\x4\x36\n\x4\x3\x4\x3\x4\x3\x4\a\x4;\n\x4\f\x4\xE\x4>\v"+
		"\x4\x3\x5\x3\x5\x3\x5\x5\x5\x43\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\a\x6K\n\x6\f\x6\xE\x6N\v\x6\x3\x6\x3\x6\x5\x6R\n\x6\x3\a\x3\a\x3\a"+
		"\a\aW\n\a\f\a\xE\aZ\v\a\x3\b\x3\b\x5\b^\n\b\x3\t\x3\t\x3\t\x3\t\a\t\x64"+
		"\n\t\f\t\xE\tg\v\t\x3\t\x3\t\x3\t\x2\x3\x6\n\x2\x4\x6\b\n\f\xE\x10\x2"+
		"\x2w\x2\x15\x3\x2\x2\x2\x4\x19\x3\x2\x2\x2\x6\x35\x3\x2\x2\x2\b\x42\x3"+
		"\x2\x2\x2\nQ\x3\x2\x2\x2\fS\x3\x2\x2\x2\xE[\x3\x2\x2\x2\x10_\x3\x2\x2"+
		"\x2\x12\x14\x5\x4\x3\x2\x13\x12\x3\x2\x2\x2\x14\x17\x3\x2\x2\x2\x15\x13"+
		"\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2\x16\x3\x3\x2\x2\x2\x17\x15\x3\x2\x2\x2"+
		"\x18\x1A\x5\x6\x4\x2\x19\x18\x3\x2\x2\x2\x1A\x1B\x3\x2\x2\x2\x1B\x19\x3"+
		"\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1D\x3\x2\x2\x2\x1D\x1E\a\x16\x2\x2"+
		"\x1E\x5\x3\x2\x2\x2\x1F \b\x4\x1\x2 !\a\t\x2\x2!\"\x5\x6\x4\x2\"#\a\n"+
		"\x2\x2#\x36\x3\x2\x2\x2$%\a\x5\x2\x2%&\x5\f\a\x2&\'\x5\n\x6\x2\'\x36\x3"+
		"\x2\x2\x2()\x5\f\a\x2)*\x5\n\x6\x2*\x36\x3\x2\x2\x2+\x36\x5\b\x5\x2,\x36"+
		"\a\r\x2\x2-\x36\a\x10\x2\x2.\x36\a\x11\x2\x2/\x36\a\xE\x2\x2\x30\x36\a"+
		"\xF\x2\x2\x31\x36\a\x14\x2\x2\x32\x36\a\x13\x2\x2\x33\x36\a\x12\x2\x2"+
		"\x34\x36\a\x15\x2\x2\x35\x1F\x3\x2\x2\x2\x35$\x3\x2\x2\x2\x35(\x3\x2\x2"+
		"\x2\x35+\x3\x2\x2\x2\x35,\x3\x2\x2\x2\x35-\x3\x2\x2\x2\x35.\x3\x2\x2\x2"+
		"\x35/\x3\x2\x2\x2\x35\x30\x3\x2\x2\x2\x35\x31\x3\x2\x2\x2\x35\x32\x3\x2"+
		"\x2\x2\x35\x33\x3\x2\x2\x2\x35\x34\x3\x2\x2\x2\x36<\x3\x2\x2\x2\x37\x38"+
		"\f\r\x2\x2\x38\x39\a\x6\x2\x2\x39;\x5\x6\x4\xE:\x37\x3\x2\x2\x2;>\x3\x2"+
		"\x2\x2<:\x3\x2\x2\x2<=\x3\x2\x2\x2=\a\x3\x2\x2\x2><\x3\x2\x2\x2?@\a\x4"+
		"\x2\x2@\x43\a\r\x2\x2\x41\x43\a\r\x2\x2\x42?\x3\x2\x2\x2\x42\x41\x3\x2"+
		"\x2\x2\x43\t\x3\x2\x2\x2\x44\x45\a\t\x2\x2\x45R\a\n\x2\x2\x46G\a\t\x2"+
		"\x2GL\x5\x6\x4\x2HI\a\v\x2\x2IK\x5\x6\x4\x2JH\x3\x2\x2\x2KN\x3\x2\x2\x2"+
		"LJ\x3\x2\x2\x2LM\x3\x2\x2\x2MO\x3\x2\x2\x2NL\x3\x2\x2\x2OP\a\n\x2\x2P"+
		"R\x3\x2\x2\x2Q\x44\x3\x2\x2\x2Q\x46\x3\x2\x2\x2R\v\x3\x2\x2\x2SX\x5\xE"+
		"\b\x2TU\a\f\x2\x2UW\x5\xE\b\x2VT\x3\x2\x2\x2WZ\x3\x2\x2\x2XV\x3\x2\x2"+
		"\x2XY\x3\x2\x2\x2Y\r\x3\x2\x2\x2ZX\x3\x2\x2\x2[]\a\r\x2\x2\\^\x5\x10\t"+
		"\x2]\\\x3\x2\x2\x2]^\x3\x2\x2\x2^\xF\x3\x2\x2\x2_`\a\a\x2\x2`\x65\x5\f"+
		"\a\x2\x61\x62\a\v\x2\x2\x62\x64\x5\f\a\x2\x63\x61\x3\x2\x2\x2\x64g\x3"+
		"\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66h\x3\x2\x2\x2g\x65"+
		"\x3\x2\x2\x2hi\a\b\x2\x2i\x11\x3\x2\x2\x2\f\x15\x1B\x35<\x42LQX]\x65";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
